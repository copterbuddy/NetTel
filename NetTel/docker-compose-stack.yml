# cmd: sudo docker-compose -f docker-compose-stack.yml up -d
# cmd: sudo docker-compose -f docker-compose-stack.yml down
networks:
  monitoring:
    name: monitoring
    driver: bridge

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  es_data:
    driver: local
  ki_data:
    driver: local

services:
  sql-server:
    image: 'mcr.microsoft.com/mssql/server:2019-CU19-ubuntu-20.04'
    container_name: sql-server
    restart: always
    ports:
        - '1433:1433'
    environment:
        - ACCEPT_EULA=Y
        - SA_PASSWORD=P@ssw0rd
    volumes:
        - './volumes_compose/mssql/data:/var/opt/mssql/data'
        - './volumes_compose/mssql/log:/var/opt/mssql/log'
        - './volumes_compose/mssql/secrets:/var/opt/mssql/secrets'
    networks:
       - monitoring

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.99.0
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yml" ]
    volumes:
      - ./config/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "8889:8889"
      - "8890:8888"
      - "13133:13133"
      - "4317:4317"
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090 # dashboard url: http://host.docker.internal:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      # - prometheus-data:/prometheus
      - ./volumes_compose/prometheus:/prometheus
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    depends_on:
      - jaeger
      - prometheus
      - otel-collector
    ports:
      - '3000:3000'
    volumes:
      # - grafana-data:/var/lib/grafana
      - ./volumes_compose/grafana:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775"
      - "6831:6831"
      - "6832:6832"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - monitoring

  elasticsearch:
    image: elasticsearch:7.17.21
    container_name: elasticsearch
    volumes:
        # - es_data:/usr/share/elasticsearch/data
        - ./volumes_compose/elasticsearch/data:/usr/share/elasticsearch/data
    environment:
        - node.name=node01
        - cluster.name=es-my-cluster
        - discovery.type=single-node
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
        - "9200:9200"
    networks:
        - monitoring

  kibana:
    image: kibana:7.17.21
    container_name: kibana
    environment:
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
        - "5601:5601"
    depends_on:
        - elasticsearch
    networks:
        - monitoring

  jenkins:
    image: jenkins/jenkins:2.60.3
    container_name: jenkins
    privileged: true
    user: root
    ports:
      - 8080:8080
      - 50000:50000
    networks:
        - monitoring
    volumes:
      # - /home/${myname}/jenkins_compose/jenkins_configuration:/var/jenkins_home
      # - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes_compose/jenkins/jenkins_configuration:/var/jenkins_home
      - ./volumes_compose/jenkins/var/run/docker.sock:/var/run/docker.sock